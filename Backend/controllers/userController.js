const User = require("../models/User");

// üìå L·∫•y th√¥ng tin profile (·∫©n password)
exports.getUserProfile = async (req, res) => {
    try {
        const { email } = req.params;

        // T√¨m user theo email
        const user = await User.findById(userId).select("-password"); // ·∫®n password
        if (!user) {
            return res.status(404).json({ success: false, message: "User kh√¥ng t·ªìn t·∫°i!" });
        }

        res.json({ success: true, user });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
};

// üìå C·∫≠p nh·∫≠t profile (Kh√¥ng cho ph√©p s·ª≠a email, kh√¥ng hi·ªÉn th·ªã password)
exports.updateUserProfile = async (req, res) => {
    try {
        const { userId } = req.params;
        const { username, location, bio } = req.body;
        let avatar = req.file ? `/uploads/${req.file.filename}` : undefined;

        // Ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c g·ª≠i l√™n (kh√¥ng c·∫≠p nh·∫≠t email)
        const updatedFields = {};
        if (username !== undefined) updatedFields.username = username;
        if (location !== undefined) updatedFields.location = location;
        if (bio !== undefined) updatedFields.bio = bio;
        if (avatar !== undefined) updatedFields.avatar = avatar;

        const updatedUser = await User.findByIdAndUpdate(userId, updatedFields, { new: true }).select("-password");

        if (!updatedUser) {
            return res.status(404).json({ success: false, message: "User kh√¥ng t·ªìn t·∫°i!" });
        }

        res.json({ success: true, message: "C·∫≠p nh·∫≠t profile th√†nh c√¥ng!", user: updatedUser });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
};
